# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

list = [42, 'some text', 3, 49.5, None]
for el in list:
    print(el, type(el))

# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input().

list = list(input("Введите числа:"))
for el in range(1, len(list), 2):
    list[el - 1], list[el]=list[el], list [el - 1]
print(list)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.

month = int (input('Введите число месяца: '))
m_list = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
m_dict = {1:'январь', 2: 'февраль',3: 'март',
          4: 'апрель', 5: 'май', 6: 'июнь',
          7: 'июль', 8: 'август', 9: 'сентябрь',
          10: 'октябрь', 11: 'ноябрь', 12: 'декабрь'}

if month in m_dict:
    print(f'{month} {m_list[month-1]}')
    print(f'{month} {m_dict[month]}')

season_list = ['зима', 'весна', 'лето', 'осень', 'зима']
season_dict = {0: 'зима', 1: 'весна', 2: 'лето', 3: 'осень',4: 'зима'}
s_month = month//3
if s_month in season_dict:
    print(f'{month} {season_list[s_month]}')
    print(f'{month} {season_dict[s_month]}')


# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

word = input('Введите несколько слов, разделенных пробелами: ').split()
for a, b in enumerate(word, 1):
    print(a, b) if len(b) <= 10 else print(a, (b[:10]))

# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

list = [7, 5, 3, 3, 2]
number = int(input('Введите новый элемент рейтинга: '))
a=0
for b in list:
    if number <= b:
        a += 1
list.insert(a, number)
print(list)
